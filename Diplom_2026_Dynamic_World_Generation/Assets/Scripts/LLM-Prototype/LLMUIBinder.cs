using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System;
using System.IO;

public class LLMUIBinder : MonoBehaviour
{
    [Header("–û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤—è–∑–∏")]
    public LLMPrototypeController controller;

    public LLMQuestGenerator questGenerator;

    [Header("Quest Generator –ü–∞–Ω–µ–ª—å")]
    public GameObject questPanel;
    public TMP_InputField inputField;
    public TMP_Dropdown typeDropdown;
    public TMP_Dropdown difficultyDropdown;
    public Button generateButton;
    public TMP_Text outputText;


    [Header("NPC –ü–∞–Ω–µ–ª—å")]
    public GameObject npcPanel;
    public TMP_InputField npcNameField;
    public TMP_InputField npcEnvironmentField;
    public TMP_Dropdown npcRelationDropdown;
    public TMP_Dropdown npcEmotionDropdown;
    public TMP_InputField npcReactionField;
    public Button npcGenerateButton;
    public Button npcSaveButton;
    public TMP_Text npcDialogueText;

    [Header("StoryTeller –ü–∞–Ω–µ–ª—å")]
    public GameObject storyTellerPanel;
    public TMP_InputField storyThemeField;
    public TMP_Dropdown storyStyleDropdown;
    public TMP_Dropdown questTypeDropdown;
    public TMP_InputField storyLengthField;
    public Button storyGenerateButton;
    public Button storySaveButton;
    public TMP_Text storyOutputText;

    [Header("Icon Generator –ü–∞–Ω–µ–ª—å")]
    public GameObject iconGeneratorPanel;
    public TMP_InputField iconDescriptionField;
    public TMP_Dropdown iconStyleDropdown;
    public TMP_InputField iconSizeField;
    public Button iconGenerateButton;
    public Button iconSaveButton;
    public TMP_Text iconStatusText;

    [Header("–ó–∞–≥—Ä—É–∑–∫–∞")]
    public GameObject loadingPanel;
    public TMP_Text loadingText;

    // === –°–æ–±—ã—Ç–∏—è ===
    public Action<string> onGenerateDialogue; 
    public Action<string> onGenerateStory;    
    public Action<string> onGenerateIcon;

    void Start()
    {
        if (controller == null)
            controller = FindObjectOfType<LLMPrototypeController>();

        if (controller == null)
        {
            Debug.LogError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω LLMPrototypeController!");
            return;
        }

        BindUI();
        generateButton.onClick.AddListener(OnGenerateClicked);
    }

    async void OnGenerateClicked()
    {
        string input = inputField.text;
        string questType = typeDropdown.options[typeDropdown.value].text;
        string difficulty = difficultyDropdown.options[difficultyDropdown.value].text;
        string prompt = $"{questType} ({difficulty}): {input}";

        outputText.text = "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...";
        string result = await questGenerator.GenerateQuest(prompt);
        outputText.text = result;
        Debug.Log("üîò –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∞");
    }
    
    public void ShowLoading(string message = "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...")
    {
        if (loadingPanel != null)
        {
            loadingPanel.SetActive(true);
            if (loadingText != null)
                loadingText.text = message;
        }
    }

    public void HideLoading()
    {
        if (loadingPanel != null)
            loadingPanel.SetActive(false);
    }

    public void BindUI()
    {
        // --- NPC ---
        if (npcGenerateButton != null)
            npcGenerateButton.onClick.AddListener(OnGenerateDialogueClicked);

        if (npcSaveButton != null)
            npcSaveButton.onClick.AddListener(SaveNPCDialogue);

        // --- StoryTeller ---
        if (storyGenerateButton != null)
            storyGenerateButton.onClick.AddListener(OnGenerateStoryClicked);

        if (storySaveButton != null)
            storySaveButton.onClick.AddListener(SaveStory);

        // --- Icon Generator ---
        if (iconGenerateButton != null)
            iconGenerateButton.onClick.AddListener(OnGenerateIconClicked);

        if (iconSaveButton != null)
            iconSaveButton.onClick.AddListener(SaveIcon);
    }

    // ==========================================================
    // üß© --- NPC ---
    // ==========================================================
    void OnGenerateDialogueClicked()
    {
        Debug.Log("üß© [UI] –ö–Ω–æ–ø–∫–∞ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥' –Ω–∞–∂–∞—Ç–∞");

        string name = npcNameField.text;
        string environment = npcEnvironmentField.text;
        string relation = npcRelationDropdown.options[npcRelationDropdown.value].text;
        string emotion = npcEmotionDropdown.options[npcEmotionDropdown.value].text;
        string reaction = npcReactionField.text;

        string inputJson = $@"{{
            ""playerAction"": ""interact"",
            ""npcName"": ""{name}"",
            ""npcState"": ""{relation}"",
            ""context"": {{
                ""location"": ""{environment}"",
                ""relationship"": ""{relation}""
            }},
            ""emotion"": ""{emotion}"",
            ""reactionLevel"": {reaction}
        }}";

        Debug.Log($"üì§ [UI] JSON –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ LLMPrototypeController:\n{inputJson}");

        onGenerateDialogue?.Invoke(inputJson);
        controller.ProcessJsonInput(inputJson);
    }

    void SaveNPCDialogue()
    {
        string text = npcDialogueText.text;
        if (string.IsNullOrEmpty(text))
        {
            Debug.LogWarning("‚ö†Ô∏è –ù–µ—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!");
            return;
        }

        string folder = Path.Combine(Application.dataPath, "Exports/NPCDialogues");
        Directory.CreateDirectory(folder);

        string filename = Path.Combine(folder, $"dialogue_{DateTime.Now:yyyyMMdd_HHmmss}.txt");
        File.WriteAllText(filename, text);

        Debug.Log($"üíæ –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}");
        npcDialogueText.text = $"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {Path.GetFileName(filename)}";
    }

    // ==========================================================
    // üìñ --- StoryTeller ---
    // ==========================================================
    void OnGenerateStoryClicked()
    {
        Debug.Log("üìö [UI] –ö–Ω–æ–ø–∫–∞ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é' –Ω–∞–∂–∞—Ç–∞");

        string theme = storyThemeField.text;
        string style = storyStyleDropdown.options[storyStyleDropdown.value].text;
        string length = storyLengthField.text;
        string questType = questTypeDropdown.options[questTypeDropdown.value].text;

        string inputJson = $@"{{
    ""storyTheme"": ""{theme}"",
    ""storyStyle"": ""{style}"",
    ""questType"": ""{questType}"",
    ""length"": ""{length}""
    }}";

        Debug.Log($"üì§ [UI] JSON –¥–ª—è –°–∫–∞–∑–∏—Ç–µ–ª—è –∏—Å—Ç–æ—Ä–∏–π:\n{inputJson}");

        onGenerateStory?.Invoke(inputJson);
        controller.ProcessJsonInput(inputJson);
        ShowLoading($"üìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ ({theme})...");
    }

    void SaveStory()
    {
        string text = storyOutputText.text;
        if (string.IsNullOrEmpty(text))
        {
            Debug.LogWarning("‚ö†Ô∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!");
            return;
        }

        string folder = Path.Combine(Application.dataPath, "Exports/Stories");
        Directory.CreateDirectory(folder);

        string filename = Path.Combine(folder, $"story_{DateTime.Now:yyyyMMdd_HHmmss}.txt");
        File.WriteAllText(filename, text);

        Debug.Log($"üíæ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}");
        storyOutputText.text = $"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {Path.GetFileName(filename)}";
    }

    // ==========================================================
    // üé® --- Icon Generator ---
    // ==========================================================
    void OnGenerateIconClicked()
    {
        Debug.Log("üé® [UI] –ö–Ω–æ–ø–∫–∞ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É' –Ω–∞–∂–∞—Ç–∞");

        string description = iconDescriptionField.text;
        string style = iconStyleDropdown.options[iconStyleDropdown.value].text;
        string size = iconSizeField.text;

        string inputJson = $@"{{
            ""iconDescription"": ""{description}"",
            ""iconStyle"": ""{style}"",
            ""iconSize"": ""{size}""
        }}";

        Debug.Log($"üì§ [UI] JSON –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ LLMPrototypeController:\n{inputJson}");

        onGenerateIcon?.Invoke(inputJson);
        controller.ProcessJsonInput(inputJson);
    }

    void SaveIcon()
    {
        string text = iconStatusText.text;
        if (string.IsNullOrEmpty(text))
        {
            Debug.LogWarning("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!");
            return;
        }

        string folder = Path.Combine(Application.dataPath, "Exports/Icons");
        Directory.CreateDirectory(folder);

        string filename = Path.Combine(folder, $"icon_{DateTime.Now:yyyyMMdd_HHmmss}.txt");
        File.WriteAllText(filename, text);

        Debug.Log($"üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∫–æ–Ω–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}");
        iconStatusText.text = $"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {Path.GetFileName(filename)}";
    }

    // ==========================================================
    // üîπ –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    // ==========================================================
    public void DisplayResult(string text)
    {
        if (npcDialogueText != null && npcPanel.activeSelf)
            npcDialogueText.text = text;

        if (storyOutputText != null && storyTellerPanel.activeSelf)
            storyOutputText.text = text;

        if (iconStatusText != null && iconGeneratorPanel.activeSelf)
            iconStatusText.text = text;
    }
}
