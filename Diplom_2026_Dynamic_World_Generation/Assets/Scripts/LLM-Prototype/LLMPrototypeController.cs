using System;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using UnityEngine;
using LLMUnity;

public class LLMPrototypeController : MonoBehaviour
{
    public LLMUIBinder uiBinder;   // –°–≤—è–∑—å —Å UI
    private LLMUnity.LLM llm;      // üîπ —Å—Å—ã–ª–∫–∞ –Ω–∞ LLM —Å–µ—Ä–≤–∏—Å

    [Header("UI Binder")]
    
    [Header("LLM Connector")]
    public GameObject llmManagerObject; // –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ LLMManager
    private LLMCharacter llmCharacter;

    [Header("Debug Options")]
    public bool useTestJson = false;

    private async void Start()
    {
        Debug.Log("üöÄ [LLMPrototypeController] –°—Ç–∞—Ä—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞...");

        if (llmManagerObject == null)
        {
            Debug.LogError("‚ùå llmManagerObject –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ!");
            return;
        }

        Debug.Log($"üîç –ü—Ä–æ–≤–µ—Ä—è—é –æ–±—ä–µ–∫—Ç LLMManager: {llmManagerObject.name}");

        //llmCharacter = llmManagerObject.GetComponent<LLMCharacter>();
        llmCharacter = llmManagerObject.GetComponentInChildren<LLMCharacter>();
        if (llmCharacter != null)
        {
            Debug.Log($"‚úÖ LLMCharacter –Ω–∞–π–¥–µ–Ω: {llmCharacter.name}");
        }
        else
        {
            Debug.LogError("‚ùå –ù–∞ –æ–±—ä–µ–∫—Ç–µ LLMManager –ù–ï–¢ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ LLMCharacter!");
        }

        // –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥—ë–º, —á—Ç–æ–±—ã LLMServer —É—Å–ø–µ–ª –ø–æ–¥–Ω—è—Ç—å—Å—è
        await Task.Delay(2000);

        if (llmCharacter != null && llmCharacter.llm != null)
        {
            Debug.Log("üß† LLMCharacter —Å–≤—è–∑–∞–Ω —Å LLMServer ‚Äî –≤—Å—ë –≥–æ—Ç–æ–≤–æ!");
        }
        else
        {
            Debug.LogWarning("‚ö† LLMCharacter –Ω–∞–π–¥–µ–Ω, –Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ LLMServer –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!");
        }
    }



    private async void OnGenerateDialogueFromUI(string jsonFromUI)
    {
        if (string.IsNullOrWhiteSpace(jsonFromUI))
        {
            Debug.LogWarning("‚ö† JSON –ø—É—Å—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ LLM.");
            return;
        }

        await SendToLLM(jsonFromUI);
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON-–∑–∞–ø—Ä–æ—Å –≤ LLM –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    /// </summary>
    public async Task SendToLLM(string json)
    {
        if (llmCharacter == null)
        {
            Debug.LogError("‚ùå LLMCharacter –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ!");
            return;
        }

        Debug.Log($"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ LLM:\n{json}");

        try
        {
            string rawResponse = await llmCharacter.Chat(json);

            if (string.IsNullOrWhiteSpace(rawResponse))
            {
                Debug.LogWarning("‚ö† –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.");
                return;
            }

            // --- –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –≤—Å—Ç–∞–≤–∫–∏ –≤—Ä–æ–¥–µ ```json``` ---
            string cleanResponse = Regex.Replace(rawResponse, @"```json|```|json", "", RegexOptions.IgnoreCase).Trim();

            // --- –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–µ–∑–∞—Ç—å –¥–æ —á–∏—Å—Ç–æ–≥–æ JSON, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –µ–≥–æ —Å –º—É—Å–æ—Ä–æ–º ---
            int start = cleanResponse.IndexOf('{');
            int end = cleanResponse.LastIndexOf('}');
            if (start >= 0 && end > start)
            {
                cleanResponse = cleanResponse.Substring(start, end - start + 1);
            }

            Debug.Log($"üì• –û—Ç–≤–µ—Ç –æ—Ç LLM:\n{cleanResponse}");

            // --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ UI ---
            if (uiBinder != null)
            {
                uiBinder.DisplayResult(cleanResponse);
            }
        }
        catch (System.Exception ex)
        {
            Debug.LogError($"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ LLM: {ex.Message}");
        }
    }
    public string testInputJson = "{}"; // –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ JSON

    public async void ProcessJsonInput(string json)
    {
        Debug.Log($"[LLMPrototypeController] ProcessJsonInput –≤—ã–∑–≤–∞–Ω —Å json: {json}");

        var binder = FindObjectOfType<LLMUIBinder>();
        if (binder != null)
            binder.ShowLoading("üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...");

        // –ó–¥–µ—Å—å —Ç–≤–æ—è —Ä–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (—á–µ—Ä–µ–∑ API, ComfyUI –∏ —Ç.–ø.)
        for (int i = 0; i <= 100; i += 10)
        {
            Debug.Log($"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {i}%");
            await System.Threading.Tasks.Task.Delay(500);
        }

        string fakeResult = "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!";
        if (binder != null)
        {
            binder.HideLoading();
            binder.DisplayResult(fakeResult);
        }
        Debug.Log($"[LLMPrototypeController] ProcessJsonInput –≤—ã–∑–≤–∞–Ω —Å json: {json}");
        Debug.Log($"üß† [LLMController] –ü–æ–ª—É—á–µ–Ω JSON:\n{json}");

        // –ó–∞–≥–ª—É—à–∫–∞ –æ—Ç–≤–µ—Ç–∞
        string fakeResponse = $"ü§ñ –û—Ç–≤–µ—Ç LLM: –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å\n{json}";
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ UI
        
        if (binder != null)
            binder.DisplayResult(fakeResponse);
        if (llmCharacter == null)
        {
            Debug.LogError("‚ùå LLMCharacter –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
            return;
        }

        try
        {
            // üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –≤ –º–æ–¥–µ–ª—å
            string resultText = await llmCharacter.Chat(json);
            if (string.IsNullOrWhiteSpace(resultText))
                resultText = "‚ö† –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç.";

            Debug.Log($"üß† –û—Ç–≤–µ—Ç –æ—Ç LLM:\n{resultText}");

            // üîπ –ü–µ—Ä–µ–¥–∞—ë–º —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω
            uiBinder?.DisplayResult(resultText);
        }
        catch (Exception ex)
        {
            Debug.LogError($"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ LLM: {ex.Message}");
        }
    }

    // =====================================================
    // üé® –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –∫–≤–µ—Å—Ç–∞
    // =====================================================
    private async void TryAutoGenerateIcon(string storyText)
    {
        Debug.Log("üé® –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–≤–µ—Å—Ç–∞...");

        // –ü—Ä–∏–º–µ—Ä: –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É –∫–≤–µ—Å—Ç–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –≤–∏–∑—É–∞–ª–∞
        string visualPrompt = $"fantasy icon, {ExtractMainSubject(storyText)}";

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ ComfyUI
        Texture2D iconTexture = await ComfyUILocalConnector.GenerateIcon(visualPrompt);

        if (iconTexture != null)
        {
            GeneratedContentSaver.SaveVisual(iconTexture);
            Debug.Log("‚úÖ –ò–∫–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!");
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É!");
        }
    }

    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –≤—ã—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    private string ExtractMainSubject(string storyText)
    {
        if (string.IsNullOrEmpty(storyText))
            return "fantasy object";

        // –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–æ: –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ / –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        if (storyText.Contains("–¥—Ä–∞–∫–æ–Ω")) return "dragon";
        if (storyText.Contains("–º–µ—á")) return "sword";
        if (storyText.Contains("–º–∞–≥")) return "wizard";
        if (storyText.Contains("–ª–µ—Å")) return "forest artifact";

        return "fantasy artifact";
    }


}
