using System.Text.RegularExpressions;
using System.Threading.Tasks;
using UnityEngine;
using LLMUnity;

public class LLMPrototypeController : MonoBehaviour
{
    [Header("UI Binder")]
    public LLMUIBinder uiBinder;

    [Header("LLM Connector")]
    public LLMCharacter llmCharacter;

    [Header("Debug Options")]
    public bool useTestJson = false;

    private async void Start()
    {
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º UI –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–Ω–æ–ø–∫—É
        if (uiBinder != null)
        {
            uiBinder.BindUI();
            uiBinder.onGenerateDialogue += OnGenerateDialogueFromUI;
        }

        // --- –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω ---
        if (useTestJson)
        {
            Debug.Log("üß© –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π JSON –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞.");
            string testJson = @"{
                ""playerAction"": ""refuse"",
                ""npcState"": ""neutral"",
                ""context"": {
                    ""location"": ""tavern"",
                    ""relationship"": ""stranger""
                }
            }";
            await SendToLLM(testJson);
        }
        else
        {
            Debug.Log("üí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞. –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞...");
        }
    }

    private async void OnGenerateDialogueFromUI(string jsonFromUI)
    {
        if (string.IsNullOrWhiteSpace(jsonFromUI))
        {
            Debug.LogWarning("‚ö† JSON –ø—É—Å—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ LLM.");
            return;
        }

        await SendToLLM(jsonFromUI);
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON-–∑–∞–ø—Ä–æ—Å –≤ LLM –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    /// </summary>
    public async Task SendToLLM(string json)
    {
        if (llmCharacter == null)
        {
            Debug.LogError("‚ùå LLMCharacter –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ!");
            return;
        }

        Debug.Log($"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ LLM:\n{json}");

        try
        {
            string rawResponse = await llmCharacter.Chat(json);

            if (string.IsNullOrWhiteSpace(rawResponse))
            {
                Debug.LogWarning("‚ö† –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.");
                return;
            }

            // --- –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –≤—Å—Ç–∞–≤–∫–∏ –≤—Ä–æ–¥–µ ```json``` ---
            string cleanResponse = Regex.Replace(rawResponse, @"```json|```|json", "", RegexOptions.IgnoreCase).Trim();

            // --- –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–µ–∑–∞—Ç—å –¥–æ —á–∏—Å—Ç–æ–≥–æ JSON, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –µ–≥–æ —Å –º—É—Å–æ—Ä–æ–º ---
            int start = cleanResponse.IndexOf('{');
            int end = cleanResponse.LastIndexOf('}');
            if (start >= 0 && end > start)
            {
                cleanResponse = cleanResponse.Substring(start, end - start + 1);
            }

            Debug.Log($"üì• –û—Ç–≤–µ—Ç –æ—Ç LLM:\n{cleanResponse}");

            // --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ UI ---
            if (uiBinder != null)
            {
                uiBinder.DisplayResult(cleanResponse);
            }
        }
        catch (System.Exception ex)
        {
            Debug.LogError($"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ LLM: {ex.Message}");
        }
    }
    public string testInputJson = "{}"; // –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ JSON

    public void ProcessJsonInput(string json)
    {
        Debug.Log($"[LLMPrototypeController] ProcessJsonInput –≤—ã–∑–≤–∞–Ω —Å json: {json}");
        // –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ GenerateDialogueFromJSON(json);
    }
}
