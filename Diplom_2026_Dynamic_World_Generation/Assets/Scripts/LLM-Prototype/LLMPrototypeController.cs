using System;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using UnityEngine;
using LLMUnity;

public class LLMPrototypeController : MonoBehaviour
{
    public LLMUIBinder uiBinder;   // –°–≤—è–∑—å —Å UI
    private LLMUnity.LLM llm;      // üîπ —Å—Å—ã–ª–∫–∞ –Ω–∞ LLM —Å–µ—Ä–≤–∏—Å

    [Header("UI Binder")]
    
    [Header("LLM Connector")]
    public GameObject llmManagerObject; // –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ LLMManager
    private LLMCharacter llmCharacter;

    [Header("Debug Options")]
    public bool useTestJson = false;

    void Start()
    {
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ GameObject
        if (llmManagerObject != null)
        {
            llmCharacter = llmManagerObject.GetComponent<LLMCharacter>();
            
            if (llmCharacter == null)
            {
                Debug.LogError("‚ùå –ù–∞ –æ–±—ä–µ–∫—Ç–µ LLMManager –Ω–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ LLMCharacter!");
            }
            else
            {
                Debug.Log("‚úÖ LLMCharacter —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏–∑ LLMManager.");
            }
        }
        else
        {
            Debug.LogError("‚ùå LLMManager GameObject –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
        }
    }


    private async void OnGenerateDialogueFromUI(string jsonFromUI)
    {
        if (string.IsNullOrWhiteSpace(jsonFromUI))
        {
            Debug.LogWarning("‚ö† JSON –ø—É—Å—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ LLM.");
            return;
        }

        await SendToLLM(jsonFromUI);
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON-–∑–∞–ø—Ä–æ—Å –≤ LLM –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    /// </summary>
    public async Task SendToLLM(string json)
    {
        if (llmCharacter == null)
        {
            Debug.LogError("‚ùå LLMCharacter –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ!");
            return;
        }

        Debug.Log($"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ LLM:\n{json}");

        try
        {
            string rawResponse = await llmCharacter.Chat(json);

            if (string.IsNullOrWhiteSpace(rawResponse))
            {
                Debug.LogWarning("‚ö† –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.");
                return;
            }

            // --- –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –≤—Å—Ç–∞–≤–∫–∏ –≤—Ä–æ–¥–µ ```json``` ---
            string cleanResponse = Regex.Replace(rawResponse, @"```json|```|json", "", RegexOptions.IgnoreCase).Trim();

            // --- –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–µ–∑–∞—Ç—å –¥–æ —á–∏—Å—Ç–æ–≥–æ JSON, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –µ–≥–æ —Å –º—É—Å–æ—Ä–æ–º ---
            int start = cleanResponse.IndexOf('{');
            int end = cleanResponse.LastIndexOf('}');
            if (start >= 0 && end > start)
            {
                cleanResponse = cleanResponse.Substring(start, end - start + 1);
            }

            Debug.Log($"üì• –û—Ç–≤–µ—Ç –æ—Ç LLM:\n{cleanResponse}");

            // --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ UI ---
            if (uiBinder != null)
            {
                uiBinder.DisplayResult(cleanResponse);
            }
        }
        catch (System.Exception ex)
        {
            Debug.LogError($"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ LLM: {ex.Message}");
        }
    }
    public string testInputJson = "{}"; // –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ JSON

    public async void ProcessJsonInput(string json)
    {
        Debug.Log($"[LLMPrototypeController] ProcessJsonInput –≤—ã–∑–≤–∞–Ω —Å json: {json}");

        if (llmCharacter == null)
        {
            Debug.LogError("‚ùå LLMCharacter –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
            return;
        }

        try
        {
            // üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –≤ –º–æ–¥–µ–ª—å
            string resultText = await llmCharacter.Chat(json);
            if (string.IsNullOrWhiteSpace(resultText))
                resultText = "‚ö† –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç.";

            Debug.Log($"üß† –û—Ç–≤–µ—Ç –æ—Ç LLM:\n{resultText}");

            // üîπ –ü–µ—Ä–µ–¥–∞—ë–º —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω
            uiBinder?.DisplayResult(resultText);
        }
        catch (Exception ex)
        {
            Debug.LogError($"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ LLM: {ex.Message}");
        }
    }
}
