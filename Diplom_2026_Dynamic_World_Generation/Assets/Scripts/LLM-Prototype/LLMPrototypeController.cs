using UnityEngine;
using LLMUnity;
using System.Threading.Tasks;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System;
using System.Reflection;
using System.Collections.Generic;

/// <summary>
/// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å LLM NPC + –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å
/// </summary>
public class LLMPrototypeController : MonoBehaviour
{
    private List<string> chatHistory = new List<string>(); // üß† –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
    private string historyFilePath;                        // –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    private const int maxHistory = 10;                     // –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –ø–∞–º—è—Ç–∏

    [Header("LLM Settings")]
    public LLMCharacter llmCharacter;

    [Header("NPC Context")]
    public string currentNPC = "Barman";                   // –∏–º—è NPC –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏

    [Header("File Paths")]
    public string inputJsonPath = "input.json";
    public string outputJsonPath = "output.json";

    [Header("Test Mode")]
    public bool testOnStart = true;
    public string testInputJson = @"{
        ""playerAction"": ""refuse"",
        ""npcState"": ""neutral"",
        ""context"": {
            ""location"": ""tavern"",
            ""relationship"": ""stranger""
        }
    }";

    private void Awake()
    {
        string basePath = Application.persistentDataPath;
        historyFilePath = Path.Combine(basePath, "chat_history.json");
        Debug.Log($"[LLM] History path: {historyFilePath}");
        LoadChatHistory();
    }

    private async void Start()
    {
        if (testOnStart)
        {
            await WaitForLLMCharacterReady(7000);
            ProcessJsonInput(testInputJson);
        }
    }

    public async void ProcessJsonInput(string inputJson)
    {
        Debug.Log("=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ===");
        Debug.Log($"–í—Ö–æ–¥–Ω–æ–π JSON: {inputJson}");

        // –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        InputData input = null;
        try
        {
            input = JsonUtility.FromJson<InputData>(inputJson);
            if (input == null)
            {
                Debug.LogError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ö–æ–¥–Ω–æ–π JSON —á–µ—Ä–µ–∑ JsonUtility.");
                return;
            }
        }
        catch (Exception e)
        {
            Debug.LogError($"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ JSON: {e}");
            return;
        }

        // üß† –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        string context = string.Join("\n", chatHistory);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        string prompt = CreatePrompt(input, context);
        Debug.Log($"–ü—Ä–æ–º–ø—Ç –¥–ª—è LLM:\n{prompt}");

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM
        string llmResponse = await SendToLLM(prompt);
        Debug.Log($"–û—Ç–≤–µ—Ç LLM:\n{llmResponse}");

        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        OutputData output = ParseLLMResponse(llmResponse);
        string outputJson = JsonUtility.ToJson(output, true);

        // üíæ –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        AddToChatHistory($"–ò–≥—Ä–æ–∫: {input.playerAction} | NPC: {output.dialogue}");

        Debug.Log($"=== –í—ã—Ö–æ–¥–Ω–æ–π JSON ===\n{outputJson}");
        SaveToFile(outputJson);
        SaveChatHistory();
    }

    private string CreatePrompt(InputData input, string historyContext)
    {
        return $@"–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, —É–ø—Ä–∞–≤–ª—è—é—â–∞—è –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –∏ —Ä–µ—á—å—é –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä–µ.  
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏—á–Ω—ã–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ —É–º–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç NPC –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞. 
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Ç—É–∞—Ü–∏—é –∏ —Å–æ–∑–¥–∞–π —Ä–µ–∞–∫—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:
{historyContext}

–¢–µ–∫—É—â–∏–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
- –î–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞: {input.playerAction}
- –°–æ—Å—Ç–æ—è–Ω–∏–µ NPC: {input.npcState}
- –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {input.context.location}
- –û—Ç–Ω–æ—à–µ–Ω–∏—è: {input.context.relationship}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –û–¢–í–ï–¢–£:
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞):
{{
    ""dialogue"": ""—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"",
    ""action"": ""–¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"",
    ""emotion"": ""—ç–º–æ—Ü–∏—è"",
    ""animation"": ""–æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏""
}}

–ü—Ä–∞–≤–∏–ª–∞:
- –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è (refuse), –∞ NPC –±—ã–ª –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º - NPC –º–æ–∂–µ—Ç —Ä–∞–∑–æ–∑–ª–∏—Ç—å—Å—è.
- –í —Ç–∞–≤–µ—Ä–Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –æ–±–æ—Å—Ç—Ä—è—é—Ç—Å—è.
- –î–∏–∞–ª–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º.
- –î–µ–π—Å—Ç–≤–∏–µ –∏ —ç–º–æ—Ü–∏—è –¥–æ–ª–∂–Ω—ã –ª–æ–≥–∏—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–µ.

–û–¢–í–ï–¢ (—Ç–æ–ª—å–∫–æ JSON):";
    }

    private async Task<string> SendToLLM(string prompt, int timeoutMs = 8000)
    {
        if (llmCharacter == null)
        {
            Debug.LogError("LLM Character –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
            return "{\"dialogue\":\"ERROR: LLMCharacter not assigned\",\"action\":\"none\",\"emotion\":\"neutral\",\"animation\":\"idle\"}";
        }

        StringBuilder response = new StringBuilder();
        bool completed = false;

        try
        {
            await llmCharacter.Chat(
                prompt,
                (string chunk) =>
                {
                    if (!string.IsNullOrEmpty(chunk))
                        response.Append(chunk);
                },
                () =>
                {
                    completed = true;
                    Debug.Log("LLM –∑–∞–≤–µ—Ä—à–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é");
                }
            );
        }
        catch (Exception ex)
        {
            Debug.LogError($"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ llmCharacter.Chat: {ex}");
            return "{\"dialogue\":\"ERROR: LLM exception\",\"action\":\"none\",\"emotion\":\"neutral\",\"animation\":\"idle\"}";
        }

        int waited = 0;
        int step = 100;
        while (!completed && waited < timeoutMs)
        {
            await Task.Delay(step);
            waited += step;
        }

        if (!completed)
        {
            Debug.LogWarning("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ LLM (SendToLLM). –í–µ—Ä–Ω—ë–º —á–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.");
        }

        return response.ToString();
    }

    private OutputData ParseLLMResponse(string llmResponse)
    {
        try
        {
            string jsonOnly = ExtractFirstJsonObject(llmResponse);
            if (!string.IsNullOrEmpty(jsonOnly))
            {
                OutputData parsed = JsonUtility.FromJson<OutputData>(jsonOnly);
                if (parsed != null)
                {
                    parsed.dialogue = string.IsNullOrEmpty(parsed.dialogue) ? "..." : parsed.dialogue;
                    parsed.action = string.IsNullOrEmpty(parsed.action) ? "idle" : parsed.action;
                    parsed.emotion = string.IsNullOrEmpty(parsed.emotion) ? "neutral" : parsed.emotion;
                    parsed.animation = string.IsNullOrEmpty(parsed.animation) ? "idle" : parsed.animation;
                    return parsed;
                }
            }
        }
        catch (Exception e)
        {
            Debug.LogError($"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ LLM –æ—Ç–≤–µ—Ç–∞: {e.Message}\n–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{llmResponse}");
        }

        return new OutputData
        {
            dialogue = "–•–º...",
            action = "idle",
            emotion = "neutral",
            animation = "idle"
        };
    }

    private string ExtractFirstJsonObject(string text)
    {
        if (string.IsNullOrEmpty(text)) return null;
        int start = text.IndexOf('{');
        if (start < 0) return null;

        int depth = 0;
        for (int i = start; i < text.Length; i++)
        {
            char c = text[i];
            if (c == '{') depth++;
            else if (c == '}') depth--;

            if (depth == 0)
                return text.Substring(start, i - start + 1);
        }
        return null;
    }

    private void SaveToFile(string json)
    {
        try
        {
            string fullPath = Path.Combine(Application.persistentDataPath, outputJsonPath);
            File.WriteAllText(fullPath, json, Encoding.UTF8);
            Debug.Log($"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {fullPath}");
        }
        catch (Exception e)
        {
            Debug.LogError($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}");
        }
    }

    // === üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é ===
    private void AddToChatHistory(string record)
    {
        chatHistory.Add(record);
        if (chatHistory.Count > maxHistory)
            chatHistory.RemoveAt(0);
    }

    public void ResetChatMemory(string newNPC = "")
    {
        chatHistory.Clear();
        if (!string.IsNullOrEmpty(newNPC))
            currentNPC = newNPC;

        SaveChatHistory();
        Debug.Log($"[LLM] –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –ù–æ–≤—ã–π NPC: {currentNPC}");
    }

    private void SaveChatHistory()
    {
        try
        {
            var data = new ChatHistoryData { npcName = currentNPC, history = chatHistory };
            string json = JsonUtility.ToJson(data, true);
            File.WriteAllText(historyFilePath, json, Encoding.UTF8);
        }
        catch (Exception e)
        {
            Debug.LogError($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}");
        }
    }

    private void LoadChatHistory()
    {
        if (!File.Exists(historyFilePath)) return;

        try
        {
            string json = File.ReadAllText(historyFilePath, Encoding.UTF8);
            ChatHistoryData data = JsonUtility.FromJson<ChatHistoryData>(json);

            if (data != null && data.npcName == currentNPC)
            {
                chatHistory = data.history ?? new List<string>();
                Debug.Log($"[LLM] –ò—Å—Ç–æ—Ä–∏—è NPC '{currentNPC}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ö–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π: {chatHistory.Count}");
            }
            else
            {
                Debug.Log($"[LLM] –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è NPC '{currentNPC}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é.");
                chatHistory = new List<string>();
            }
        }
        catch (Exception e)
        {
            Debug.LogError($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}");
        }
    }

    private async Task WaitForLLMCharacterReady(int timeoutMs = 5000)
    {
        int waited = 0;
        int step = 200;

        while (llmCharacter == null && waited < timeoutMs)
        {
            Debug.Log("–ñ–¥—ë–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è llmCharacter...");
            await Task.Delay(step);
            waited += step;
        }

        if (llmCharacter == null)
        {
            Debug.LogError("LLMCharacter –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
            return;
        }
    }

    // === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ===
    [Serializable]
    private class ChatHistoryData
    {
        public string npcName;
        public List<string> history;
    }
    // =======================
    // üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ JSON-–∑–∞–ø—Ä–æ—Å–∞ –∏–∑ UI
    // =======================


    // =======================
    // üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ JSON-–∑–∞–ø—Ä–æ—Å–∞ –∏–∑ UI (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
    // =======================
    public string GenerateDialogueFromJSON(string jsonInput)
    {
        try
        {
            // 1Ô∏è‚É£ –†–∞–∑–±–∏—Ä–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π JSON
            var data = JsonUtility.FromJson<DialogueInput>(jsonInput);
            if (data == null)
            {
                Debug.LogError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ö–æ–¥–Ω–æ–π JSON.");
                return "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON.";
            }

            // 2Ô∏è‚É£ –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç InputData (—Ç–æ—Ç, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)
            InputData input = new InputData
            {
                playerAction = data.playerAction,
                npcState = data.npcState,
                context = new InputData.Context
                {
                    location = data.context.location,
                    relationship = data.context.relationship
                }
            };

            // 3Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            ProcessJsonInput(JsonUtility.ToJson(input));

            return "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...";
        }
        catch (System.Exception ex)
        {
            Debug.LogError($"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {ex.Message}");
            return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞.";
        }
    }

// =======================
// üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è JSON-–≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
// =======================

[System.Serializable]
public class DialogueInput
{
    public string playerAction;
    public string npcState;
    public DialogueContext context;
    public string emotion;
    public int reactionLevel;
}

[System.Serializable]
public class DialogueContext
{
    public string location;
    public string relationship;
}

// üîπ –§–æ—Ä–º–∞—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–Ω–æ–≥–æ JSON (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ProcessJsonInput)
[System.Serializable]
public class InputData
{
    public string playerAction;
    public string npcState;
    public Context context;

    [System.Serializable]
    public class Context
    {
        public string location;
        public string relationship;
    }
}

// üîπ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM
[System.Serializable]
public class OutputData
{
    public string dialogue;
    public string action;
    public string emotion;
    public string animation;
}


}
