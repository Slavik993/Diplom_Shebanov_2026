using UnityEngine;
using UnityEngine.UI;
using TMPro;
#if UNITY_EDITOR
using UnityEditor;
#endif

/// <summary>
/// –°–æ–∑–¥–∞—ë—Ç UI-–ø–∞–Ω–µ–ª–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º: –°–∫–∞–∑–∏—Ç–µ–ª—å, –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä NPC, –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∫–æ–Ω.
/// –†–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ PlayMode, –∏ –≤ Editor.
/// </summary>
public class UIDynamicBuilder : MonoBehaviour
{
    [Header("–ü–∞–Ω–µ–ª–∏")]
    public GameObject mainMenu;
    public GameObject storyTellerPanel;
    public GameObject npcPanel;
    public GameObject iconGeneratorPanel;

    [Header("–≠–ª–µ–º–µ–Ω—Ç—ã NPC-–ø–∞–Ω–µ–ª–∏ (–¥–ª—è LLMUIBinder)")]
    public TMP_InputField npcNameField;
    public TMP_InputField npcEnvironmentField; // üÜï –û–∫—Ä—É–∂–µ–Ω–∏–µ
    public TMP_Dropdown npcRelationDropdown;
    public TMP_Dropdown npcEmotionDropdown;
    public TMP_InputField npcReactionField;
    public Button npcGenerateButton;
    public TextMeshProUGUI npcDialogueText;

    private Canvas canvas;

    [Header("–≠–ª–µ–º–µ–Ω—ã—Ç—ã Storyteller-–ø–∞–Ω–µ–ª–∏")]

    public TMP_InputField storyThemeField;
    public TMP_Dropdown storyStyleDropdown;
    public TMP_InputField storyLengthField;
    public Button storyGenerateButton;
    public TextMeshProUGUI storyOutputText;

    [Header("–≠–ª–µ–º–µ–Ω—Ç—ã Icon Generator-–ø–∞–Ω–µ–ª–∏")]

    public TMP_InputField iconDescriptionField;
    public TMP_Dropdown iconStyleDropdown;
    public TMP_InputField iconSizeField;
    public Button iconGenerateButton;
    public TextMeshProUGUI iconStatusText;

    void Awake()
    {
        BuildUI();
    }

    public void CreateUI() => BuildUI(); // üëà –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞

    void BuildUI()
    {
        canvas = FindObjectOfType<Canvas>();
        if (canvas == null)
        {
            var cgo = new GameObject("Canvas", typeof(Canvas), typeof(CanvasScaler), typeof(GraphicRaycaster));
            canvas = cgo.GetComponent<Canvas>();
            canvas.renderMode = RenderMode.ScreenSpaceOverlay;
        }

        CreateMainMenu();
        CreateNPCPanel();
        CreateStoryTellerPanel();
        CreateIconPanel();

        ShowOnly(mainMenu);
    }

    // === –ü–∞–Ω–µ–ª–∏ ===

    void CreateMainMenu()
    {
        mainMenu = CreatePanel("MainMenu");

        CreateLabel(mainMenu.transform, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", new Vector2(0, 180));

        CreateButton(mainMenu.transform, "–°–∫–∞–∑–∏—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–π", new Vector2(0, 100),
            () => ShowOnly(storyTellerPanel));

        CreateButton(mainMenu.transform, "–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä NPC", new Vector2(0, 40),
            () => ShowOnly(npcPanel));

        CreateButton(mainMenu.transform, "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∫–æ–Ω", new Vector2(0, -20),
            () => ShowOnly(iconGeneratorPanel));
    }

    void CreateNPCPanel()
    {
        npcPanel = CreatePanel("NPCPanel");
        npcPanel.SetActive(false);

        CreateLabel(npcPanel.transform, "–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä NPC", new Vector2(0, 200));

        // –ò–º—è
        CreateLabel(npcPanel.transform, "–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", new Vector2(0, 140));
        npcNameField = CreateInputField(npcPanel.transform, new Vector2(0, 110));

        // üÜï –û–∫—Ä—É–∂–µ–Ω–∏–µ
        CreateLabel(npcPanel.transform, "–û–∫—Ä—É–∂–µ–Ω–∏–µ (–º–µ—Å—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è)", new Vector2(0, 70));
        npcEnvironmentField = CreateInputField(npcPanel.transform, new Vector2(0, 40));
        npcEnvironmentField.text = "—Ç–∞–≤–µ—Ä–Ω–∞"; // –¥–µ—Ñ–æ–ª—Ç

        // –û—Ç–Ω–æ—à–µ–Ω–∏—è
        CreateLabel(npcPanel.transform, "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–∫—É", new Vector2(0, 0));
        npcRelationDropdown = CreateDropdown(npcPanel.transform,
            new string[] { "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π", "–≤—Ä–∞–∂–¥–µ–±–Ω—ã–π" }, new Vector2(0, -30));

        // –≠–º–æ—Ü–∏—è
        CreateLabel(npcPanel.transform, "–≠–º–æ—Ü–∏—è", new Vector2(0, -70));
        npcEmotionDropdown = CreateDropdown(npcPanel.transform,
            new string[] { "—Å–ø–æ–∫–æ–π–Ω—ã–π", "—Å–µ—Ä–¥–∏—Ç—ã–π", "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π", "–∏—Å–ø—É–≥–∞–Ω–Ω—ã–π" }, new Vector2(0, -100));

        // –†–µ–∞–∫—Ü–∏—è
        CreateLabel(npcPanel.transform, "–†–µ–∞–∫—Ü–∏—è (0‚Äì100)", new Vector2(0, -140));
        npcReactionField = CreateInputField(npcPanel.transform, new Vector2(0, -170));

        npcGenerateButton = CreateButton(npcPanel.transform, "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥", new Vector2(0, -220), null);

        npcDialogueText = CreateLabel(npcPanel.transform, "–î–∏–∞–ª–æ–≥ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å", new Vector2(0, -260), 18, FontStyles.Italic);

        CreateButton(npcPanel.transform, "–ù–∞–∑–∞–¥", new Vector2(0, -310), () => ShowOnly(mainMenu));
    }

    void CreateStoryTellerPanel()
    {
        storyTellerPanel = CreatePanel("StoryTellerPanel");
        storyTellerPanel.SetActive(false);

        CreateLabel(storyTellerPanel.transform, "–°–∫–∞–∑–∏—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–π", new Vector2(0, 200));

        CreateLabel(storyTellerPanel.transform, "–¢–µ–º–∞ –∏—Å—Ç–æ—Ä–∏–∏", new Vector2(0, 140));
        storyThemeField = CreateInputField(storyTellerPanel.transform, new Vector2(0, 110));

        CreateLabel(storyTellerPanel.transform, "–°—Ç–∏–ª—å –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è", new Vector2(0, 70));
        storyStyleDropdown = CreateDropdown(storyTellerPanel.transform,
            new string[] { "—Å–∫–∞–∑–æ—á–Ω—ã–π", "–¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π", "–ø—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–π" }, new Vector2(0, 40));

        CreateLabel(storyTellerPanel.transform, "–î–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ (—Å–ª–æ–≤)", new Vector2(0, 0));
        storyLengthField = CreateInputField(storyTellerPanel.transform, new Vector2(0, -30));

        storyGenerateButton = CreateButton(storyTellerPanel.transform, "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", new Vector2(0, -80), null);

        storyOutputText = CreateLabel(storyTellerPanel.transform, "–¢–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å", new Vector2(0, -140), 18, FontStyles.Italic);

        CreateButton(storyTellerPanel.transform, "–ù–∞–∑–∞–¥", new Vector2(0, -220), () => ShowOnly(mainMenu));
    }

    void CreateIconPanel()
    {
        iconGeneratorPanel = CreatePanel("IconGeneratorPanel");
        iconGeneratorPanel.SetActive(false);

        CreateLabel(iconGeneratorPanel.transform, "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∫–æ–Ω", new Vector2(0, 200));

        CreateLabel(iconGeneratorPanel.transform, "–û–ø–∏—Å–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏", new Vector2(0, 140));
        iconDescriptionField = CreateInputField(iconGeneratorPanel.transform, new Vector2(0, 110));

        CreateLabel(iconGeneratorPanel.transform, "–°—Ç–∏–ª—å –∏–∫–æ–Ω–∫–∏", new Vector2(0, 70));
        iconStyleDropdown = CreateDropdown(iconGeneratorPanel.transform,
            new string[] { "2D", "3D", "–ø–∏–∫—Å–µ–ª—å-–∞—Ä—Ç" }, new Vector2(0, 40));

        CreateLabel(iconGeneratorPanel.transform, "–†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ (px)", new Vector2(0, 0));
        iconSizeField = CreateInputField(iconGeneratorPanel.transform, new Vector2(0, -30));

        iconGenerateButton = CreateButton(iconGeneratorPanel.transform, "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É", new Vector2(0, -80), null);

        iconStatusText = CreateLabel(iconGeneratorPanel.transform, "–°—Ç–∞—Ç—É—Å: –æ–∂–∏–¥–∞–Ω–∏–µ...", new Vector2(0, -140), 18, FontStyles.Italic);

        CreateButton(iconGeneratorPanel.transform, "–ù–∞–∑–∞–¥", new Vector2(0, -220), () => ShowOnly(mainMenu));
    }

    // === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ===

    GameObject CreatePanel(string name)
    {
        var panel = new GameObject(name, typeof(RectTransform), typeof(CanvasRenderer), typeof(Image));
        panel.transform.SetParent(canvas.transform, false);
        var rect = panel.GetComponent<RectTransform>();
        rect.sizeDelta = new Vector2(500, 550);
        rect.anchoredPosition = Vector2.zero;
        panel.GetComponent<Image>().color = new Color(0, 0, 0, 0.4f);
        panel.GetComponent<RectTransform>().SetAsLastSibling();
        return panel;
    }

    TextMeshProUGUI CreateLabel(Transform parent, string text, Vector2 pos, int size = 20, FontStyles style = FontStyles.Bold)
    {
        var go = new GameObject("Label", typeof(RectTransform), typeof(TextMeshProUGUI));
        go.transform.SetParent(parent, false);
        var txt = go.GetComponent<TextMeshProUGUI>();
        txt.text = text;
        txt.fontSize = size;
        txt.alignment = TextAlignmentOptions.Center;
        txt.fontStyle = style;
        var rect = go.GetComponent<RectTransform>();
        rect.anchoredPosition = pos;
        rect.sizeDelta = new Vector2(400, 40);
        return txt;
    }

    TMP_InputField CreateInputField(Transform parent, Vector2 pos)
    {
        var go = new GameObject("InputField", typeof(RectTransform), typeof(Image), typeof(TMP_InputField));
        go.transform.SetParent(parent, false);
        var rect = go.GetComponent<RectTransform>();
        rect.sizeDelta = new Vector2(300, 36);
        rect.anchoredPosition = pos;
        go.GetComponent<Image>().color = new Color(0.2f, 0.25f, 0.3f);

        var text = new GameObject("Text", typeof(RectTransform), typeof(TextMeshProUGUI));
        text.transform.SetParent(go.transform, false);
        var tmp = text.GetComponent<TextMeshProUGUI>();
        tmp.alignment = TextAlignmentOptions.Center;
        tmp.fontSize = 18;
        tmp.color = Color.white;

        var field = go.GetComponent<TMP_InputField>();
        field.textComponent = tmp;
        return field;
    }

    Button CreateButton(Transform parent, string label, Vector2 pos, UnityEngine.Events.UnityAction onClick)
    {
        var go = new GameObject("Button", typeof(RectTransform), typeof(CanvasRenderer), typeof(Image), typeof(Button));
        go.transform.SetParent(parent, false);
        var rect = go.GetComponent<RectTransform>();
        rect.sizeDelta = new Vector2(220, 40);
        rect.anchoredPosition = pos;

        var img = go.GetComponent<Image>();
        img.color = new Color(0.2f, 0.3f, 0.6f);

        var txtObj = new GameObject("Text", typeof(TextMeshProUGUI));
        txtObj.transform.SetParent(go.transform, false);
        var txt = txtObj.GetComponent<TextMeshProUGUI>();
        txt.text = label;
        txt.alignment = TextAlignmentOptions.Center;
        txt.fontSize = 18;
        txt.color = Color.white;

        var btn = go.GetComponent<Button>();
        if (onClick != null)
            btn.onClick.AddListener(onClick);

        return btn;
    }

    TMP_Dropdown CreateDropdown(Transform parent, string[] options, Vector2 pos)
    {
        var go = new GameObject("Dropdown", typeof(RectTransform), typeof(CanvasRenderer), typeof(Image), typeof(TMP_Dropdown));
        go.transform.SetParent(parent, false);
        var rect = go.GetComponent<RectTransform>();
        rect.sizeDelta = new Vector2(300, 36);
        rect.anchoredPosition = pos;

        var bg = go.GetComponent<Image>();
        bg.color = new Color(0.2f, 0.25f, 0.3f);

        var dropdown = go.GetComponent<TMP_Dropdown>();
        dropdown.targetGraphic = bg;

        var captionGO = new GameObject("Label", typeof(TextMeshProUGUI));
        captionGO.transform.SetParent(go.transform, false);
        var caption = captionGO.GetComponent<TextMeshProUGUI>();
        caption.text = options.Length > 0 ? options[0] : "";
        caption.fontSize = 18;
        caption.color = Color.white;
        caption.alignment = TextAlignmentOptions.MidlineLeft;

        var captionRect = captionGO.GetComponent<RectTransform>();
        captionRect.anchorMin = Vector2.zero;
        captionRect.anchorMax = Vector2.one;
        captionRect.offsetMin = new Vector2(10, 0);
        captionRect.offsetMax = new Vector2(-10, 0);

        dropdown.captionText = caption;

        dropdown.options.Clear();
        foreach (var opt in options)
            dropdown.options.Add(new TMP_Dropdown.OptionData(opt));
        dropdown.RefreshShownValue();

        return dropdown;
    }

    public void ShowOnly(GameObject target)
    {
        mainMenu?.SetActive(false);
        storyTellerPanel?.SetActive(false);
        npcPanel?.SetActive(false);
        iconGeneratorPanel?.SetActive(false);
        target?.SetActive(true);
    }
}
